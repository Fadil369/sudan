# Sudan National Digital Identity Portal - Production Deployment Configuration
# Kubernetes deployment for 50M+ concurrent users with high availability

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sudan-digital-identity-portal
  namespace: sudan-government
  labels:
    app: sudan-digital-identity
    component: frontend
    environment: production
    version: v1.0.0
spec:
  replicas: 10  # Scale based on traffic
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sudan-digital-identity
      component: frontend
  template:
    metadata:
      labels:
        app: sudan-digital-identity
        component: frontend
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - sudan-digital-identity
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - high-memory
      containers:
      - name: sudan-portal-frontend
        image: sudan-gov/digital-identity-portal:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: REACT_APP_ENVIRONMENT
          value: "production"
        - name: REACT_APP_API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: sudan-portal-config
              key: api-base-url
        - name: REACT_APP_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: sudan-portal-secrets
              key: jwt-secret
        - name: REACT_APP_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: sudan-portal-secrets
              key: encryption-key
        - name: REACT_APP_BRAINSAIT_API_KEY
          valueFrom:
            secretKeyRef:
              name: sudan-portal-secrets
              key: brainsait-api-key
        envFrom:
        - configMapRef:
            name: sudan-portal-config
        - secretRef:
            name: sudan-portal-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      - name: nginx-proxy
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
          name: http-proxy
        - containerPort: 443
          name: https-proxy
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-certs
          mountPath: /etc/nginx/ssl
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      - name: monitoring-sidecar
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100
          name: node-metrics
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: config-volume
        configMap:
          name: sudan-portal-config
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tls-certs
        secret:
          secretName: sudan-portal-tls
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        persistentVolumeClaim:
          claimName: sudan-portal-logs
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      serviceAccountName: sudan-portal-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      imagePullSecrets:
      - name: sudan-gov-registry-secret

---
apiVersion: v1
kind: Service
metadata:
  name: sudan-digital-identity-service
  namespace: sudan-government
  labels:
    app: sudan-digital-identity
    component: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: sudan-digital-identity
    component: frontend
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sudan-digital-identity-hpa
  namespace: sudan-government
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sudan-digital-identity-portal
  minReplicas: 10
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: concurrent_users
      target:
        type: AverageValue
        averageValue: "500k"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sudan-digital-identity-pdb
  namespace: sudan-government
spec:
  minAvailable: 70%
  selector:
    matchLabels:
      app: sudan-digital-identity
      component: frontend

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sudan-portal-config
  namespace: sudan-government
data:
  api-base-url: "https://api.sudan.gov.sd/v1"
  environment: "production"
  monitoring-enabled: "true"
  cache-ttl: "3600"
  max-concurrent-users: "50000000"
  session-timeout: "1800"
  default-language: "ar"
  supported-languages: "ar,en"
  biometric-enabled: "true"
  blockchain-enabled: "true"
  audit-logging-enabled: "true"
  compliance-mode: "iso27001"
  
  # Ministry API URLs
  health-api-url: "https://health.sudan.gov.sd/api/v1"
  education-api-url: "https://education.sudan.gov.sd/api/v1"
  finance-api-url: "https://finance.sudan.gov.sd/api/v1"
  agriculture-api-url: "https://agriculture.sudan.gov.sd/api/v1"
  energy-api-url: "https://energy.sudan.gov.sd/api/v1"
  infrastructure-api-url: "https://infrastructure.sudan.gov.sd/api/v1"
  justice-api-url: "https://justice.sudan.gov.sd/api/v1"
  foreign-affairs-api-url: "https://foreign.sudan.gov.sd/api/v1"
  labor-api-url: "https://labor.sudan.gov.sd/api/v1"
  social-welfare-api-url: "https://social.sudan.gov.sd/api/v1"
  
  # External Integration URLs
  national-records-api: "https://records.sudan.gov.sd/api/v1"
  central-bank-api: "https://cbs.sudan.gov.sd/api/v1"
  sudan-post-api: "https://post.sudan.gov.sd/api/v1"
  statistics-api: "https://statistics.sudan.gov.sd/api/v1"
  biometric-service-url: "https://biometric.sudan.gov.sd/api/v1"
  
  # BrainSAIT Integration
  brainsait-api-url: "https://api.brainsait.com/v1"
  brainsait-oid-registry: "https://oid.brainsait.com/v1"
  sudan-oid-branch: "1.3.6.1.4.1.61026.1"
  
  # Blockchain Configuration
  blockchain-ca-url: "https://ca.sudan-blockchain.gov.sd"
  blockchain-peer-url: "grpc://peer0.sudan-blockchain.gov.sd:7051"
  blockchain-orderer-url: "grpc://orderer.sudan-blockchain.gov.sd:7050"
  blockchain-channel: "sudan-identity-channel"
  blockchain-chaincode: "sudan-identity-chaincode"
  
  # Performance Configuration
  api-timeout: "30000"
  api-rate-limit: "1000"
  max-file-size: "10485760"
  compression-enabled: "true"
  pwa-enabled: "true"
  offline-support: "true"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sudan-digital-identity-ingress
  namespace: sudan-government
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://portal.sudan.gov.sd"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Citizen-OID"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - portal.sudan.gov.sd
    - api.sudan.gov.sd
    secretName: sudan-portal-tls
  rules:
  - host: portal.sudan.gov.sd
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sudan-digital-identity-service
            port:
              number: 80
  - host: api.sudan.gov.sd
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: sudan-api-service
            port:
              number: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sudan-portal-service-account
  namespace: sudan-government
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/SudanPortalServiceRole

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: sudan-government
  name: sudan-portal-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sudan-portal-rolebinding
  namespace: sudan-government
subjects:
- kind: ServiceAccount
  name: sudan-portal-service-account
  namespace: sudan-government
roleRef:
  kind: Role
  name: sudan-portal-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sudan-portal-logs
  namespace: sudan-government
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: aws-efs